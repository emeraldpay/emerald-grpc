syntax = "proto3";
package emerald;
option java_package = "io.emeraldpay.api.proto";

service Auth {
    // Get a JWT token to be used for further requests
    rpc Authenticate (AuthRequest) returns (AuthResponse) {}

    // Refresh an expired JWT token
    rpc Refresh(RefreshRequest) returns (AuthResponse) {}

    // Issue a new secret token (based on the current authentication)
    rpc IssueToken(IssueTokenRequest) returns (IssuedTokenResponse) {}

    // Get the details about the current authentication
    rpc WhoAmI(WhoAmIRequest) returns (WhoAmIResponse) {}

    // List all tokens for the requests organization
    rpc ListTokens(ListTokensRequest) returns (ListTokensResponse) {}

    // Delete token
    rpc DeleteToken(DeleteTokenRequest) returns (DeleteTokenResponse) {}
}

message AuthRequest {
    repeated string agent_details = 1;
    repeated string capabilities = 2;
    repeated string scopes = 3;
    oneof auth_type {
        // DEPRECATED
        TempAuth temp_auth = 4;
        string auth_secret = 5;
    }
}

// DEPRECATED
message TempAuth {
    string id = 1;
}

message AuthResponse {
    // DEPRECATED, check `status` instead
    bool succeed = 1;
    // if denied, is the code of the error, similar to HTTP error codes structure, i.e., 4xx/5xx
    // zero if succeed
    uint32 status = 2;
    // (optional) a human readable message for the error
    string deny_message = 3;

    // access token to be used for further requests
    string access_token = 10;
    // token used to receive an updated access token when the current one has expired
    string refresh_token = 11;
    // when the access token expires
    uint64 expires_at = 12;
    // type of the access token, ex. JWT_RS256
    string type = 13;
}

message RefreshRequest {
    // original secret token used to authenticate for this refresh token
    string auth_secret = 1;
    // refresh token
    string refresh_token = 2;
}

message WhoAmIRequest {
}

message WhoAmIResponse {
    bool is_authenticated = 1;
    // (only if authenticated) id of the original token used for authentication
    string token_id = 2;
    // (only if authenticated) current user id. may be null if the authentication was not associated with a user
    string user_id = 3;
}

message ListTokensRequest {
    // (required) filter by organization
    string organization_id = 1;
    // (optional) filter by project
    string project_id = 2;
}

message ListTokensResponse {
    repeated TokenDetails tokens = 1;
}

message TokenDetails {
    string organization_id = 1;
    string project_id = 2;
    string token_id = 3;
    // when the token was created
    uint64 creation_date = 4;
    // a user specified description of the token
    string description = 5;
}

message IssueTokenRequest {
    TokenType type = 1;
    // (optional) the scopes to be used for the token. Cannot be larger that the current authenticated scopes.
    repeated string scopes = 2;
    // (optional) the user id associated with the token, i.e. who will use the token.
    // There are restrictions who can set this. In short the token issuer must be in control of the user / impersonate the user.
    string user_id = 3;
    // (optional) a timestamp (millis since epoch) when it expires.
    // For a temp token, by default, it's 1 Day and cannot be more than 30 days.
    // For other tokens it never expires.
    uint64 expire_at = 4;

    // (for a permanent token) organization id for the token
    string organization_id = 5;
    // (for a permanent token) project id for the token
    string project_id = 6;
    // (for a permanent token) description of the token
    string description = 7;

    enum TokenType {
        // a one-time token that is valid for a short period of time, just a reference to the current token for one time and exclusive session but may be limited by time, scope, etc.
        // expires after first use.
        TEMP = 0;
        // a token that is valid for a long period of time, multiple sessions and associated with a project for stats and billing
        PERMANENT = 1;
    }
}

message IssuedTokenResponse {
    // the token to authenticate with
    string auth_secret = 1;
    // when the access token expires (millis since epoch)
    // 0 (zero) if never expires
    uint64 expires_at = 2;
}

message DeleteTokenRequest {
    string organization_id = 1;
    string project_id = 2;
    string token_id = 3;

}

message DeleteTokenResponse {
}